// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id          String    @id
  name        String
  logo        String?
  fundation   DateTime
  city        String
  state       String
  association String
  isActive    Boolean   @default(true)
  units       Unit[]
  members     User[]
  reunioes    Reunion[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Unit {
  id         String          @id
  name       String
  clubId     String
  logo       String?
  club       Club            @relation(fields: [clubId], references: [id])
  isActive   Boolean         @default(true)
  members    User[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  challenges ChallengeUnit[]
}

model User {
  id            String          @id
  clubId        String
  name          String
  email         String          @unique
  password      String
  photo         String?
  birthday      DateTime
  gender        Gender
  isActive      Boolean         @default(true)
  club          Club            @relation(fields: [clubId], references: [id])
  classes       Class[]
  specialty     Specialty[]
  unit          Unit[]
  roles         Role[]
  permissions   Permission[]
  contacts      Contact[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChallengeUser ChallengeUser[]
  presencas     Presenca[]
}

model Contact {
  id        String   @id
  userId    String
  firstName String
  lastName  String
  email     String
  phone     String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id        String   @id
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id        String   @id
  name      String
  category  String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String       @id
  name        String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[]
}

model Permission {
  id        String   @id
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
  users     User[]
}

enum Gender {
  MASCULINO
  FEMININO
}

model Challenge {
  id            String          @id
  name          String
  cover         String?
  description   String
  point         Int
  category      Category
  type          Type
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  units         ChallengeUnit[]
  ChallengeUser ChallengeUser[]
}

enum Category {
  CLASSE
  PARTICIPACAO
  ESPIRITUALIDADE
  SOCIAL
}

enum Type {
  INDIVIDUAL
  EQUIPE
}

model ChallengeUnit {
  id          String                 @id
  challengeId String
  unitId      String
  isCompleted Boolean                @default(false)
  challenge   Challenge              @relation(fields: [challengeId], references: [id])
  unit        Unit                   @relation(fields: [unitId], references: [id])
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  uploads     ChallengeUnitUploads[]
}

model ChallengeUnitUploads {
  id              String        @id
  challengeUnitId String
  url             String
  description     String?
  challengeUnit   ChallengeUnit @relation(fields: [challengeUnitId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ChallengeUser {
  id          String                 @id
  challengeId String
  userId      String
  isCompleted Boolean                @default(false)
  challenge   Challenge              @relation(fields: [challengeId], references: [id])
  user        User                   @relation(fields: [userId], references: [id])
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  uploads     ChallengeUserUploads[]
}

model ChallengeUserUploads {
  id              String        @id
  challengeUserId String
  url             String
  description     String?
  challengeUser   ChallengeUser @relation(fields: [challengeUserId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Reunion {
  id          String     @id
  clubId      String
  name        String
  description String
  date        DateTime
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  presencas   Presenca[]
  club        Club       @relation(fields: [clubId], references: [id])
}

model Presenca {
  id          String   @id
  reunionId   String
  userId      String
  date        DateTime
  potualidade Boolean
  biblia      Boolean
  caderno     Boolean
  lenco       Boolean
  vestuario   Boolean
  user        User     @relation(fields: [userId], references: [id])
  reunion     Reunion  @relation(fields: [reunionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
